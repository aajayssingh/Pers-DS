#!/usr/bin/env bash

#
# (c) Copyright 2016 Hewlett Packard Enterprise Development LP
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version. This program is
# distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details. You should have received a copy of the GNU Lesser
# General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#

debug_log=test_instr_log.txt
total_fails=0
out="instr_out.txt"

################################################################
#                       debug_print                            #
################################################################
function debug_print
{
    local err_str="[TEST_INSTR] $1"
    local echoon="$2"
    if [ -z "$echoon" ]; then
        echoon=$debug
    elif [ "${echoon,,}" == "true" ]; then
        echoon="true"
    fi
    if [ "$echoon" == "true" ]; then
        echo "$err_str"
    fi
    echo "$err_str" >> $debug_log
}
################################################################
#                           failed_run                         #
################################################################
function failed_run
{
    debug_print "Retaining .out .bc files for debugging purposes" "true"
    total_fails=$(($total_fails+1))
}
################################################################
#                     test_instrumentation                     #
################################################################
function test_instrumentation
{
    debug_print "Beginning instrumentation testing" "true"
    test_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    cd $test_dir
    plugin="$test_dir/../plugin_build/NvmInstrumenter.so"
    atlas_root="$test_dir/../.."
    if [ -f "$plugin" ]; then
        debug_print "Found compiler plugin build"
    elif [ ! -z "$PLUGIN" ]; then
        debug_print "Found compiler plugin to test instrumentation in $PLUGIN"
        plugin="$PLUGIN"
    else
        debug_print "Cannot detect a build of atlas instrumentation plugin, ensure it is built with compiler-plugin/build_plugin." "true"
        debug_print "If your build plugin is outside of compiler_plugin, set \$PLUGIN to it's location" "true"
        exit 1
    fi
    if ! which opt > /dev/null ; then
        debug_print "Cannot find opt - cannot conduct instrumentation testing, exiting" "true"
        exit 1
    fi
    if opt --version | grep assert > /dev/null; then
        debug_print "Found a version of opt built with asserts"
    else
        debug_print "No version of opt with asserts found, cannot check statistics, exiting" "true"
        exit 1
    fi

    tests=($(ls -d *.c *.cpp 2> /dev/null))
    for testname in ${tests[@]}; do
        testname=${testname%.*}
        if [ ! -f test_refs/$testname\.ref ]; then
            debug_print "Test $testname does not have a .ref file under test_refs. If this test has just been added, consult the README on how to generate a corresponding .ref file" "true"
            debug_print "Counting as a failure, running next test" "true"
            failed_run
            continue
        fi
        debug_print "Generating llvm ir bitcode file for $testname"
        clang -c -emit-llvm $testname\.c -I$atlas_root/runtime/include &> /dev/null
        if [ "$?" -ne 0 ]; then
            debug_print "Failed to generate bitcode for $testname, running next test" "true"
            failed_run
            continue
        fi
        debug_print "Using opt to get instrumentation readout of bitcode for $testname"
        opt -load $plugin -NvmInstrumenter -stats < $testname\.bc > /dev/null 2> $testname\.out
        if [ "$?" -ne 0 ]; then
            debug_print "Failed to run opt for $testname, running next test" "true"
            failed_run
            continue
        fi
        debug_print "Using sed to sanitise $testname.out"
        sed -i '/Number of/!d' $testname\.out
        debug_print "Results of $testname are" "true"
        cat $testname\.out | tee -a $debug_log
        debug_print "Running diff, output is in $debug_log"
        if diff $testname\.out test_refs/$testname\.ref >> $debug_log; then
            debug_print "Instrumentation results were as expected for $testname" "true"
            debug_print "Run successful - removing $testname\.out and $testname\.bc"
            rm -f $testname\.out $testname\.bc
        else
            debug_print "Instrumentation stats did not match expected values for $testname" "true"
            debug_print "Counting as a failure - view diff in $debug_log" "true"
            failed_run
        fi
    done
}
################################################################
#                            main                              #
################################################################
#Run with debug flag set to true to see output of build commands and which tests are passing.
#which would have been displayed with debug flag set to true. test_region_log contains output of tests.

help_str="USAGE: ./test_instr [debug flag: true or false] \nVerifies correctness of instrumentation by compiler_plugin. \nRequires a debug build of LLVM with assertions and the compiler plugin to be built."

debug="$1"
if [ "${debug,,}" == "false" ]; then #bash4.0 convert to lower
    debug="false"
elif [ "${debug,,}" == "true" ]; then #bash4.0 convert to lower
    debug="true"
else
    echo -e "$help_str"
    exit 1
fi
rm -f $debug_log
debug_print "Set debug value to $debug"
test_instrumentation
if [[ $total_fails -gt 0 ]]; then
    debug_print "$total_fails fails for region tests" "true"
    exit 1
else
    debug_print "No failures occurred, instrumentation testing passed" "true"
    exit 0
fi
